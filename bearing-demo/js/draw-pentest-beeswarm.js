async function drawBeeswarm() {
  data = await d3.csv("../../data/pentest-example-data.csv")
  var dateParse = d3.timeParse("%d/%m/%Y");
  var formatDate = d3.timeFormat("%d %B %Y")

  var xAccessor = d => dateParse(d.date)
  var yAccessor = d => d.type
  var genderAccessor = d => d.gender
  var radiusAccessor = d => d.age * 0.1
  var severityAccessor = d => d.severity

  var nodeDefaultColour = '#FF8811'
  // Extend date range by 1 month
  var dateRange = d3.extent(data, xAccessor)
  var dateRangeExtended = [d3.timeMonth.offset(dateRange[0], - 2), dateRange[1]]

  var severityColorRange = d3.scaleOrdinal()
    .domain(data.map(severityAccessor))
    .range(['red', 'orange','white']);

  var width = d3.select("#beeswarm").node().clientWidth;
  var height = 400;
  var dimensions = {
    width: width,
    height: height,
    margin: {
      top: 40,
      right: 40,
      bottom: 90,
      left: 130
    },
  }

  dimensions.boundedWidth = dimensions.width
    - dimensions.margin.left
    - dimensions.margin.right
  dimensions.boundedHeight = dimensions.height
    - dimensions.margin.top
    - dimensions.margin.bottom

  var tooltip = d3.tip()
    .attr("class", "d3-tip")
    .html((EVENT, d) =>
    "Vulnerability: <b>" + d.vulnerability + "</b><br>" +
    "Date discovered: <b>" + formatDate(xAccessor(d)) + "</b><br>" +
    "Severity: <b>" + d.severity + "</b><br>" +
    "Description: <b>" + d.description + "</b><br>"
  )
  .direction('s');

  var wrapper = d3.select("#beeswarm")
    .append("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)

  var bounds = wrapper.append("g")
    .style("transform", `translate(${
      dimensions.margin.left
    }px, ${
      dimensions.margin.top
    }px)`)
    .call(tooltip)


  // x-axis Scales and Generators
  var xScale = d3.scaleTime()
    .domain(dateRangeExtended)
    .range([0, dimensions.boundedWidth])
    .nice()

  var xAxisGenerator = d3.axisBottom()
    .scale(xScale)
    .ticks(3)

  var xAxis = bounds.append("g")
    .call(xAxisGenerator)
    .attr("class", "x axis")
    .style("transform", `translateY(${dimensions.boundedHeight}px)`)

  // y-axis Scales and Generators
  var yScale = d3.scalePoint()
    .domain(data.map(yAccessor))
    .padding(0.5)
    .range([0, dimensions.boundedHeight])

  var yAxisGenerator = d3.axisLeft()
    .scale(yScale)

  var yAxis = bounds.append("g")
    .call(yAxisGenerator)
    .attr("class", "y axis")
    .style("transform", `translate(${dimensions.margin.left},0)`)

  var radius_value = 10

  var simulation = d3.forceSimulation(data)
    .force("x", d3.forceX(dimensions.boundedWidth/2).strength(0.04))
    .force("y", d3.forceY(dimensions.boundedHeight/2).strength(0.04))
    .force("collide", d3.forceCollide().radius(radius_value*1.4).iterations(1))
    .on("tick", tick)

  function tick() {
    d3.selectAll(".node")
      .attr("cx", d => d.x)
      .attr("cy", d => d.y)
    }

  var node = bounds.selectAll(".node")
    .data(data).enter()
    .append("circle")
    .attr("class", "node")
    .attr("r", d => radius_value)
    .attr("fill", d => severityColorRange(severityAccessor(d)))
    //.attr("fill", severityColorRange(severityAccessor(d)))
    .on("mouseover", tooltip.show)
    .on("mouseout", tooltip.hide)

  bounds.append("text")
    .attr("x", dimensions.boundedWidth / 2)
    .attr("y", dimensions.boundedHeight + 40)
    .attr("class", "x axis label")
    .style("fill", "white")

    simulation
      .alpha(0.3)
      .alphaTarget(0.3)
      .restart()
      .force("x", d3.forceX(d => xScale(xAccessor(d))).strength(0.1))
      .force("y", d3.forceY(d => yScale(yAccessor(d))).strength(0.1))
      .force("collide", d3.forceCollide().radius(radius_value).iterations(1))
      .on("tick", tick)

    bounds.select('.x.axis.label')
      .text('Date')
      .attr("y", dimensions.boundedHeight + 40)

};
drawBeeswarm();
